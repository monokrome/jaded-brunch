// Generated by CoffeeScript 1.6.3
var JadedBrunchPlugin, Q, fs, jade, jadePath, mkdirp, path, progeny, _;

jade = require('jade');

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

progeny = require('progeny');

Q = require('q');

_ = require('lodash');

jadePath = path.dirname(require.resolve('jade'));

module.exports = JadedBrunchPlugin = (function() {
  JadedBrunchPlugin.prototype.brunchPlugin = true;

  JadedBrunchPlugin.prototype.type = 'template';

  JadedBrunchPlugin.prototype.extension = 'jade';

  JadedBrunchPlugin.prototype.jadeOptions = {};

  JadedBrunchPlugin.prototype.staticPath = 'public';

  JadedBrunchPlugin.prototype.projectPath = path.resolve(process.cwd());

  JadedBrunchPlugin.prototype.staticPatterns = /^app(\/|\\)(.+)\.static\.jade$/;

  JadedBrunchPlugin.prototype.include = [path.join(jadePath, 'runtime.js')];

  function JadedBrunchPlugin(config) {
    this.config = config;
    this.configure();
    this.getDependencies = progeny({
      rootPath: this.config.paths.root
    });
  }

  JadedBrunchPlugin.prototype.configure = function() {
    var options, _ref, _ref1;
    if (((_ref = this.config.paths) != null ? _ref["public"] : void 0) != null) {
      this.staticPath = this.config.paths["public"];
    }
    if (((_ref1 = this.config.plugins) != null ? _ref1.jaded : void 0) != null) {
      options = this.config.plugins.jaded;
      if (options.staticPatterns != null) {
        this.staticPatterns = options.staticPatterns;
      }
      if (options.jade != null) {
        this.jadeOptions = options.jade;
      }
      if (options.path != null) {
        return this.staticPath = options.path;
      }
    }
  };

  JadedBrunchPlugin.prototype.makeOptions = function(data) {
    var locals, options;
    if (this.jadeOptions.locals != null) {
      locals = _.extend({}, this.jadeOptions.locals, data);
    } else {
      locals = data;
    }
    return options = _.extend({}, this.jadeOptions, {
      locals: data
    });
  };

  JadedBrunchPlugin.prototype.templateFactory = function(options, templatePath) {
    var deferred, promise;
    deferred = Q.defer();
    promise = fs.readFile(templatePath, 'utf-8', function(error, data) {
      var template;
      if (error) {
        return deferred.reject(new Error(error));
      } else {
        template = jade.compile(data, options);
        return deferred.resolve(template);
      }
    });
    return deferred.promise;
  };

  JadedBrunchPlugin.prototype.compile = function(data, originalPath, callback) {
    var err, errorHandler, options, pathTestResults, patterns, promise, relativePath, successHandler, templatePath,
      _this = this;
    templatePath = path.resolve(originalPath);
    options = this.makeOptions(data);
    if (!_.isArray(this.staticPatterns)) {
      patterns = [this.staticPatterns];
    } else {
      patterns = this.staticPatterns;
    }
    relativePath = path.relative(this.projectPath, templatePath);
    pathTestResults = _.filter(patterns, function(pattern) {
      return pattern.test(relativePath);
    });
    errorHandler = function(error) {
      return callback(error);
    };
    successHandler = function(template) {
      var extensionStartIndex, matches, output, outputDirectory, outputPath, staticPath;
      if (pathTestResults.length) {
        output = template(options);
        staticPath = path.join(_this.projectPath, _this.staticPath);
        matches = relativePath.match(pathTestResults[0]);
        outputPath = matches[matches.length - 1];
        extensionStartIndex = outputPath.length - _this.extension.length;
        if (outputPath.slice(extensionStartIndex) === _this.extension) {
          outputPath = outputPath.slice(0, +(extensionStartIndex - 2) + 1 || 9e9);
        }
        outputPath = "" + outputPath + ".html";
        outputPath = path.join(staticPath, outputPath);
        outputDirectory = path.dirname(outputPath);
        return mkdirp(outputDirectory, function(err) {
          if (err) {
            return callback(err, null);
          } else {
            return fs.writeFile(outputPath, output, function(err, written, buffer) {
              if (err) {
                return callback(err, null);
              } else {
                return callback(null, output);
              }
            });
          }
        });
      } else {
        return callback(null, "module.exports = " + (template.toString()) + ";");
      }
    };
    options = _.extend({}, options, {
      client: pathTestResults.length === 0
    });
    options.filename = options.filename || relativePath;
    try {
      promise = this.templateFactory(options, templatePath);
    } catch (_error) {
      err = _error;
      callback(err);
    }
    promise.done(successHandler);
    return promise.fail(errorHandler);
  };

  return JadedBrunchPlugin;

})();
